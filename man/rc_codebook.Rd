% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rc_codebook.R
\name{rc_codebook}
\alias{rc_codebook}
\title{Recode values within a wide dataset}
\usage{
rc_codebook(
  data,
  codebook,
  variable = NULL,
  from = NULL,
  to = NULL,
  factor_levels = NULL
)
}
\arguments{
\item{data}{a \code{data.frame} with columns containing unique variables}

\item{codebook}{a \code{data.frame} containing at least three columns
corresponding to: 1) variable (column) names within \code{data}, 2) old
values within \code{data} to be replaced, and 3) new values that will be
used to replace the old. Optionally contains a third column specifiying
factor levels. Values within columns of \code{codebook} are linked by row.}

\item{variable}{a character string containing the column name
within \code{codebook} housing variable names (columns) within \code{data}
to be recoded}

\item{from}{a character string containing the column name
within \code{codebook} housing old values from \code{data}}

\item{to}{a character string containing the column name
within \code{codebook} housing new values that will be used
as substitutes for current values within \code{data}}

\item{factor_levels}{a character string containing the column name
within \code{codebook} housing values that will be used to assign the order
of factor levels within recoded values of \code{data}}
}
\value{
A \code{data.frame} similar to \code{data}, except that
specified values will have been recoded based on \code{codebook}
}
\description{
Function to recode values within columns of a dataset using a custom
codebook
}
\details{
The purpose of this function is to make recoding variables within a dataset,
easier through the use of a user-generated codebook. The intent is that
this codebook will be stored as a tabular data file, which may be more
easily edited, and subsequently imported during for analysis.
Storing the codebook in this way may also make reporting changes in
variable coding into others, who may not be familiar with R. Moreover,
delimited text files may be version controlled to document changes to
variable coding schemes throughout the analysis.

Preliminary steps include importing the dataset as
a wide-format \code{data.frame}, which will
correspond to the \code{data} argument and generating a \code{data.frame}
that will serve as the codebook, \code{codebook}.
\code{codebook} must contain at least three
columns whose column names are specified in the \code{variable},
\code{from}, and \code{to} arguments of this function.
\code{variable} corresponds to a column within \code{codebook}
that contains the names of variables to be edited. These variables will in
turn correspond to column names within \code{data}.
\code{from} will specify
the name of a column in \code{codebook} that contains old values within \code{data}
that may subsequently be recoded. \code{from} corresponds to a column
in \code{codebook} that contains new value for each old value.
}
\examples{
codebook <- data.frame(variable = c("x", "x", "y", "y"),
                from = c("0", "1", "0", "1"),
                to = c("no", "yes", "no", "yes"),
                stringsAsFactors = FALSE)
data <- data.frame(PID = 1:4,
                  x = c("0", "1", "1", "0"),
                  y = c("1", "1", "0", "0"),
                  stringsAsFactors = FALSE)
out <- rc_codebook(data, codebook, "variable", "from", "to")
out
}
